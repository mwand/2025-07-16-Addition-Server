# Project Scope
This is a very simple project to illustrate the service-controller architecture

## Project Components
Typescript
node.js
vitest
eslint
stryker
vite



## Coding Standards
- Use TypeScript with strict mode
- Prefer functional programming patterns
- Always include error handling
- Write self-documenting code with clear variable names
- Never delete tests
- Avoid using "any" type unless absolutely necessary
- Avoid imperative programming constructs like loops and mutable state
- Avoid using "unknown" type; prefer specific types or generics

## Response Format
- For complex requests, guide me step-by-step
- Provide complete, working code
- Include brief explanations for complex logic
- Suggest optimizations when relevant

## Repository Structure
- `src/` for source code
  - `additionService.ts` for business logic
  - `additionController.ts` for handling requests
  - `*.test.ts` for tests
  - `scratchpad.ts` for experimental code
  - `express.ts` for express app setup
  - - `src/server.ts` to start the application
- `package.json` for dependencies and scripts

## Development
- Develop each layer independently
- Write tests for all new functionality
- Use `npm run lint` to check code style
- Use `npm run mutation` to run mutation tests with Stryker
- Develop the layers in the order: service → controller → server.
- Test each layer independently before integrating.


## scratchpad.ts Usage
- Use `scratchpad.ts` for prototyping and testing snippets
- Do not include `scratchpad.ts` in production code or tests
- Run with `npm run tsx` or `npx tsx src/scratchpad.ts`

## React
- Include React only if explicitly requested
- Use functional components and hooks if React is included
- Follow best practices for state management and component design
- Use chakra-ui for UI components if React is included

## VSC Settings
- Use the recommended settings for TypeScript and ESLint
- Enable auto-format on save
- Use the "Prettier - Code formatter" extension for consistent code style
- Enable "ESLint" extension for linting feedback
- Enable "Path Intellisense" extension for easier imports
- Enable "Error Lens" extension for better error visibility
- Enable "GitLens" extension for enhanced Git integration
- Enable "vitest" extension for improved testing support

## AI Assistance
- Remind me to commit after significant changes or every 1 hour, whichever comes first
- Remind me to commit any time I replace a file completely.
- Remind me to add .cursorrules every time I start a new editing session
- Remind me to add .cursorrules if I ever lose .cursorrules from my context
- Remind me to review and update .cursorrules regularly
- Use the latest context from .cursorrules for all responses

## Testing
- Use `vitest` for unit tests
- If a port is busy, don't use a different port for testing; use `npx kill-port` to kill the port, then try again.
- 
